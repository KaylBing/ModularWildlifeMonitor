<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="11693172"><g><title>OPENSSL_init_crypto (1,325,992 samples, 11.34%)</title><rect x="0.0000%" y="613" width="11.3399%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1325992"/><text x="0.2500%" y="623.50">OPENSSL_init_cryp..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="613" width="2.1479%" height="15" fill="rgb(217,0,24)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="623.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="597" width="2.1479%" height="15" fill="rgb(221,193,54)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="607.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="581" width="2.1479%" height="15" fill="rgb(248,212,6)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="591.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="565" width="2.1479%" height="15" fill="rgb(208,68,35)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="575.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="549" width="2.1479%" height="15" fill="rgb(232,128,0)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="559.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="533" width="2.1479%" height="15" fill="rgb(207,160,47)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="543.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="517" width="2.1479%" height="15" fill="rgb(228,23,34)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="527.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="501" width="2.1479%" height="15" fill="rgb(218,30,26)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="511.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="485" width="2.1479%" height="15" fill="rgb(220,122,19)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="495.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="469" width="2.1479%" height="15" fill="rgb(250,228,42)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="479.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="453" width="2.1479%" height="15" fill="rgb(240,193,28)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="463.50">[..</text></g><g><title>[unknown] (251,156 samples, 2.15%)</title><rect x="11.3399%" y="437" width="2.1479%" height="15" fill="rgb(216,20,37)" fg:x="1325992" fg:w="251156"/><text x="11.5899%" y="447.50">[..</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="469" width="8.9140%" height="15" fill="rgb(206,188,39)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="479.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="453" width="8.9140%" height="15" fill="rgb(217,207,13)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="463.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="437" width="8.9140%" height="15" fill="rgb(231,73,38)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="447.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="421" width="8.9140%" height="15" fill="rgb(225,20,46)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="431.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="405" width="8.9140%" height="15" fill="rgb(210,31,41)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="415.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="389" width="8.9140%" height="15" fill="rgb(221,200,47)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="399.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="373" width="8.9140%" height="15" fill="rgb(226,26,5)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="383.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="357" width="8.9140%" height="15" fill="rgb(249,33,26)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="367.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="341" width="8.9140%" height="15" fill="rgb(235,183,28)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="351.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="325" width="8.9140%" height="15" fill="rgb(221,5,38)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="335.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="309" width="8.9140%" height="15" fill="rgb(247,18,42)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="319.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="293" width="8.9140%" height="15" fill="rgb(241,131,45)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="303.50">[unknown]</text></g><g><title>[unknown] (1,042,334 samples, 8.91%)</title><rect x="13.4878%" y="277" width="8.9140%" height="15" fill="rgb(249,31,29)" fg:x="1577148" fg:w="1042334"/><text x="13.7378%" y="287.50">[unknown]</text></g><g><title>regex::exec::ExecBuilder::build (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="613" width="17.4316%" height="15" fill="rgb(225,111,53)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="623.50">regex::exec::ExecBuilder::b..</text></g><g><title>regex::compile::Compiler::compile (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="597" width="17.4316%" height="15" fill="rgb(238,160,17)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="607.50">regex::compile::Compiler::c..</text></g><g><title>regex::compile::Compiler::c (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="581" width="17.4316%" height="15" fill="rgb(214,148,48)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="591.50">regex::compile::Compiler::c</text></g><g><title>regex::compile::Compiler::c (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="565" width="17.4316%" height="15" fill="rgb(232,36,49)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="575.50">regex::compile::Compiler::c</text></g><g><title>regex::compile::Compiler::c (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="549" width="17.4316%" height="15" fill="rgb(209,103,24)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="559.50">regex::compile::Compiler::c</text></g><g><title>regex::compile::Compiler::c_repeat_zero_or_one (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="533" width="17.4316%" height="15" fill="rgb(229,88,8)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="543.50">regex::compile::Compiler::c..</text></g><g><title>regex::compile::Compiler::c (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="517" width="17.4316%" height="15" fill="rgb(213,181,19)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="527.50">regex::compile::Compiler::c</text></g><g><title>regex::compile::Compiler::c_repeat_range (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="501" width="17.4316%" height="15" fill="rgb(254,191,54)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="511.50">regex::compile::Compiler::c..</text></g><g><title>regex::compile::Compiler::c_class (2,038,305 samples, 17.43%)</title><rect x="13.4878%" y="485" width="17.4316%" height="15" fill="rgb(241,83,37)" fg:x="1577148" fg:w="2038305"/><text x="13.7378%" y="495.50">regex::compile::Compiler::c..</text></g><g><title>regex::compile::CompileClass::c_utf8_seq (995,971 samples, 8.52%)</title><rect x="22.4018%" y="469" width="8.5175%" height="15" fill="rgb(233,36,39)" fg:x="2619482" fg:w="995971"/><text x="22.6518%" y="479.50">regex::compi..</text></g><g><title>[unknown] (995,971 samples, 8.52%)</title><rect x="22.4018%" y="453" width="8.5175%" height="15" fill="rgb(226,3,54)" fg:x="2619482" fg:w="995971"/><text x="22.6518%" y="463.50">[unknown]</text></g><g><title>[unknown] (995,971 samples, 8.52%)</title><rect x="22.4018%" y="437" width="8.5175%" height="15" fill="rgb(245,192,40)" fg:x="2619482" fg:w="995971"/><text x="22.6518%" y="447.50">[unknown]</text></g><g><title>[unknown] (995,971 samples, 8.52%)</title><rect x="22.4018%" y="421" width="8.5175%" height="15" fill="rgb(238,167,29)" fg:x="2619482" fg:w="995971"/><text x="22.6518%" y="431.50">[unknown]</text></g><g><title>[unknown] (995,971 samples, 8.52%)</title><rect x="22.4018%" y="405" width="8.5175%" height="15" fill="rgb(232,182,51)" fg:x="2619482" fg:w="995971"/><text x="22.6518%" y="415.50">[unknown]</text></g><g><title>[unknown] (995,971 samples, 8.52%)</title><rect x="22.4018%" y="389" width="8.5175%" height="15" fill="rgb(231,60,39)" fg:x="2619482" fg:w="995971"/><text x="22.6518%" y="399.50">[unknown]</text></g><g><title>[unknown] (995,971 samples, 8.52%)</title><rect x="22.4018%" y="373" width="8.5175%" height="15" fill="rgb(208,69,12)" fg:x="2619482" fg:w="995971"/><text x="22.6518%" y="383.50">[unknown]</text></g><g><title>[unknown] (4,581,106 samples, 39.18%)</title><rect x="0.0000%" y="629" width="39.1776%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="4581106"/><text x="0.2500%" y="639.50">[unknown]</text></g><g><title>rustup::cli::proxy_mode::main (965,653 samples, 8.26%)</title><rect x="30.9194%" y="613" width="8.2583%" height="15" fill="rgb(213,116,39)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="623.50">rustup::cli..</text></g><g><title>rustup::cli::common::set_globals (965,653 samples, 8.26%)</title><rect x="30.9194%" y="597" width="8.2583%" height="15" fill="rgb(222,207,29)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="607.50">rustup::cli..</text></g><g><title>rustup::config::Cfg::resolve_toolchain (965,653 samples, 8.26%)</title><rect x="30.9194%" y="581" width="8.2583%" height="15" fill="rgb(206,96,30)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="591.50">rustup::con..</text></g><g><title>rustup::dist::dist::PartialToolchainDesc::resolve (965,653 samples, 8.26%)</title><rect x="30.9194%" y="565" width="8.2583%" height="15" fill="rgb(218,138,4)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="575.50">rustup::dis..</text></g><g><title>rustup::dist::triple::PartialTargetTriple::new (965,653 samples, 8.26%)</title><rect x="30.9194%" y="549" width="8.2583%" height="15" fill="rgb(250,191,14)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="559.50">rustup::dis..</text></g><g><title>std::sys_common::once::futex::Once::call (965,653 samples, 8.26%)</title><rect x="30.9194%" y="533" width="8.2583%" height="15" fill="rgb(239,60,40)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="543.50">std::sys_co..</text></g><g><title>regex::re_unicode::Regex::new (965,653 samples, 8.26%)</title><rect x="30.9194%" y="517" width="8.2583%" height="15" fill="rgb(206,27,48)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="527.50">regex::re_u..</text></g><g><title>regex::exec::ExecBuilder::build (965,653 samples, 8.26%)</title><rect x="30.9194%" y="501" width="8.2583%" height="15" fill="rgb(225,35,8)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="511.50">regex::exec..</text></g><g><title>regex_syntax::hir::literal::prefixes (965,653 samples, 8.26%)</title><rect x="30.9194%" y="485" width="8.2583%" height="15" fill="rgb(250,213,24)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="495.50">regex_synta..</text></g><g><title>regex_syntax::hir::literal::prefixes (965,653 samples, 8.26%)</title><rect x="30.9194%" y="469" width="8.2583%" height="15" fill="rgb(247,123,22)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="479.50">regex_synta..</text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (965,653 samples, 8.26%)</title><rect x="30.9194%" y="453" width="8.2583%" height="15" fill="rgb(231,138,38)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="463.50">core::ptr::..</text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (965,653 samples, 8.26%)</title><rect x="30.9194%" y="437" width="8.2583%" height="15" fill="rgb(231,145,46)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="447.50">&lt;regex_synt..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (965,653 samples, 8.26%)</title><rect x="30.9194%" y="421" width="8.2583%" height="15" fill="rgb(251,118,11)" fg:x="3615453" fg:w="965653"/><text x="31.1694%" y="431.50">alloc::vec:..</text></g><g><title>__libc_csu_init (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="597" width="10.3508%" height="15" fill="rgb(217,147,25)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="607.50">__libc_csu_init</text></g><g><title>curl::INIT_CTOR::init_ctor (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="581" width="10.3508%" height="15" fill="rgb(247,81,37)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="591.50">curl::INIT_CTOR..</text></g><g><title>std::sys_common::once::futex::Once::call (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="565" width="10.3508%" height="15" fill="rgb(209,12,38)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="575.50">std::sys_common..</text></g><g><title>curl_global_init (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="549" width="10.3508%" height="15" fill="rgb(227,1,9)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="559.50">curl_global_init</text></g><g><title>ossl_init (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="533" width="10.3508%" height="15" fill="rgb(248,47,43)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="543.50">ossl_init</text></g><g><title>OPENSSL_init_ssl (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="517" width="10.3508%" height="15" fill="rgb(221,10,30)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="527.50">OPENSSL_init_ssl</text></g><g><title>OPENSSL_init_crypto (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="501" width="10.3508%" height="15" fill="rgb(210,229,1)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="511.50">OPENSSL_init_cr..</text></g><g><title>CRYPTO_THREAD_run_once (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="485" width="10.3508%" height="15" fill="rgb(222,148,37)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="495.50">CRYPTO_THREAD_r..</text></g><g><title>__pthread_once_slow (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="469" width="10.3508%" height="15" fill="rgb(234,67,33)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="479.50">__pthread_once_..</text></g><g><title>ossl_init_config_ossl_ (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="453" width="10.3508%" height="15" fill="rgb(247,98,35)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="463.50">ossl_init_confi..</text></g><g><title>openssl_config_int (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="437" width="10.3508%" height="15" fill="rgb(247,138,52)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="447.50">openssl_config_..</text></g><g><title>OPENSSL_init_crypto (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="421" width="10.3508%" height="15" fill="rgb(213,79,30)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="431.50">OPENSSL_init_cr..</text></g><g><title>CRYPTO_THREAD_run_once (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="405" width="10.3508%" height="15" fill="rgb(246,177,23)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="415.50">CRYPTO_THREAD_r..</text></g><g><title>__pthread_once_slow (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="389" width="10.3508%" height="15" fill="rgb(230,62,27)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="399.50">__pthread_once_..</text></g><g><title>ossl_init_engine_rdrand_ossl_ (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="373" width="10.3508%" height="15" fill="rgb(216,154,8)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="383.50">ossl_init_engin..</text></g><g><title>ERR_clear_error (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="357" width="10.3508%" height="15" fill="rgb(244,35,45)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="367.50">ERR_clear_error</text></g><g><title>ERR_get_state (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="341" width="10.3508%" height="15" fill="rgb(251,115,12)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="351.50">ERR_get_state</text></g><g><title>OPENSSL_init_crypto (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="325" width="10.3508%" height="15" fill="rgb(240,54,50)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="335.50">OPENSSL_init_cr..</text></g><g><title>CRYPTO_THREAD_run_once (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="309" width="10.3508%" height="15" fill="rgb(233,84,52)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="319.50">CRYPTO_THREAD_r..</text></g><g><title>__pthread_once_slow (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="293" width="10.3508%" height="15" fill="rgb(207,117,47)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="303.50">__pthread_once_..</text></g><g><title>ossl_init_load_crypto_strings_ossl_ (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="277" width="10.3508%" height="15" fill="rgb(249,43,39)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="287.50">ossl_init_load_..</text></g><g><title>err_load_crypto_strings_int (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="261" width="10.3508%" height="15" fill="rgb(209,38,44)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="271.50">err_load_crypto..</text></g><g><title>ERR_load_PKCS7_strings (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="245" width="10.3508%" height="15" fill="rgb(236,212,23)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="255.50">ERR_load_PKCS7_..</text></g><g><title>ERR_load_strings_const (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="229" width="10.3508%" height="15" fill="rgb(242,79,21)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="239.50">ERR_load_string..</text></g><g><title>OPENSSL_LH_insert (1,210,339 samples, 10.35%)</title><rect x="39.1776%" y="213" width="10.3508%" height="15" fill="rgb(211,96,35)" fg:x="4581106" fg:w="1210339"/><text x="39.4276%" y="223.50">OPENSSL_LH_inse..</text></g><g><title>rustup::cli::self_update::cleanup_self_updater (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="517" width="9.6326%" height="15" fill="rgb(253,215,40)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="527.50">rustup::cli::s..</text></g><g><title>rustup::utils::utils::cargo_home (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="501" width="9.6326%" height="15" fill="rgb(211,81,21)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="511.50">rustup::utils:..</text></g><g><title>&lt;home::env::OsEnv as home::env::Env&gt;::var_os (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="485" width="9.6326%" height="15" fill="rgb(208,190,38)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="495.50">&lt;home::env::Os..</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="469" width="9.6326%" height="15" fill="rgb(235,213,38)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="479.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="453" width="9.6326%" height="15" fill="rgb(237,122,38)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="463.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="437" width="9.6326%" height="15" fill="rgb(244,218,35)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="447.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="421" width="9.6326%" height="15" fill="rgb(240,68,47)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="431.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="405" width="9.6326%" height="15" fill="rgb(210,16,53)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="415.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="389" width="9.6326%" height="15" fill="rgb(235,124,12)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="399.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="373" width="9.6326%" height="15" fill="rgb(224,169,11)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="383.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="357" width="9.6326%" height="15" fill="rgb(250,166,2)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="367.50">[unknown]</text></g><g><title>[unknown] (1,126,356 samples, 9.63%)</title><rect x="49.5284%" y="341" width="9.6326%" height="15" fill="rgb(242,216,29)" fg:x="5791445" fg:w="1126356"/><text x="49.7784%" y="351.50">[unknown]</text></g><g><title>core::str::converts::from_utf8 (928,096 samples, 7.94%)</title><rect x="59.1610%" y="437" width="7.9371%" height="15" fill="rgb(230,116,27)" fg:x="6917801" fg:w="928096"/><text x="59.4110%" y="447.50">core::str::..</text></g><g><title>core::str::validations::run_utf8_validation (928,096 samples, 7.94%)</title><rect x="59.1610%" y="421" width="7.9371%" height="15" fill="rgb(228,99,48)" fg:x="6917801" fg:w="928096"/><text x="59.4110%" y="431.50">core::str::..</text></g><g><title>core::str::validations::contains_nonascii (928,096 samples, 7.94%)</title><rect x="59.1610%" y="405" width="7.9371%" height="15" fill="rgb(253,11,6)" fg:x="6917801" fg:w="928096"/><text x="59.4110%" y="415.50">core::str::..</text></g><g><title>__libc_start_main_impl (4,208,931 samples, 35.99%)</title><rect x="39.1776%" y="613" width="35.9948%" height="15" fill="rgb(247,143,39)" fg:x="4581106" fg:w="4208931"/><text x="39.4276%" y="623.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (2,998,592 samples, 25.64%)</title><rect x="49.5284%" y="597" width="25.6440%" height="15" fill="rgb(236,97,10)" fg:x="5791445" fg:w="2998592"/><text x="49.7784%" y="607.50">__libc_start_call_main</text></g><g><title>main (2,998,592 samples, 25.64%)</title><rect x="49.5284%" y="581" width="25.6440%" height="15" fill="rgb(233,208,19)" fg:x="5791445" fg:w="2998592"/><text x="49.7784%" y="591.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,998,592 samples, 25.64%)</title><rect x="49.5284%" y="565" width="25.6440%" height="15" fill="rgb(216,164,2)" fg:x="5791445" fg:w="2998592"/><text x="49.7784%" y="575.50">std::sys_common::backtrace::__rust_begin_..</text></g><g><title>rustup_init::main (2,998,592 samples, 25.64%)</title><rect x="49.5284%" y="549" width="25.6440%" height="15" fill="rgb(220,129,5)" fg:x="5791445" fg:w="2998592"/><text x="49.7784%" y="559.50">rustup_init::main</text></g><g><title>rustup::cli::proxy_mode::main (2,998,592 samples, 25.64%)</title><rect x="49.5284%" y="533" width="25.6440%" height="15" fill="rgb(242,17,10)" fg:x="5791445" fg:w="2998592"/><text x="49.7784%" y="543.50">rustup::cli::proxy_mode::main</text></g><g><title>rustup::config::Cfg::find_or_install_override_toolchain_or_default (1,872,236 samples, 16.01%)</title><rect x="59.1610%" y="517" width="16.0114%" height="15" fill="rgb(242,107,0)" fg:x="6917801" fg:w="1872236"/><text x="59.4110%" y="527.50">rustup::config::Cfg::find..</text></g><g><title>rustup::toolchain::DistributableToolchain::get_toolchain_desc_with_manifest (1,872,236 samples, 16.01%)</title><rect x="59.1610%" y="501" width="16.0114%" height="15" fill="rgb(251,28,31)" fg:x="6917801" fg:w="1872236"/><text x="59.4110%" y="511.50">rustup::toolchain::Distri..</text></g><g><title>rustup::dist::manifestation::Manifestation::load_manifest (1,872,236 samples, 16.01%)</title><rect x="59.1610%" y="485" width="16.0114%" height="15" fill="rgb(233,223,10)" fg:x="6917801" fg:w="1872236"/><text x="59.4110%" y="495.50">rustup::dist::manifestati..</text></g><g><title>std::fs::read_to_string::inner (1,872,236 samples, 16.01%)</title><rect x="59.1610%" y="469" width="16.0114%" height="15" fill="rgb(215,21,27)" fg:x="6917801" fg:w="1872236"/><text x="59.4110%" y="479.50">std::fs::read_to_string::..</text></g><g><title>std::io::default_read_to_string (1,872,236 samples, 16.01%)</title><rect x="59.1610%" y="453" width="16.0114%" height="15" fill="rgb(232,23,21)" fg:x="6917801" fg:w="1872236"/><text x="59.4110%" y="463.50">std::io::default_read_to_..</text></g><g><title>std::io::default_read_to_end (944,140 samples, 8.07%)</title><rect x="67.0981%" y="437" width="8.0743%" height="15" fill="rgb(244,5,23)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="447.50">std::io::de..</text></g><g><title>__GI___libc_read (944,140 samples, 8.07%)</title><rect x="67.0981%" y="421" width="8.0743%" height="15" fill="rgb(226,81,46)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="431.50">__GI___libc..</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="405" width="8.0743%" height="15" fill="rgb(247,70,30)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="415.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="389" width="8.0743%" height="15" fill="rgb(212,68,19)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="399.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="373" width="8.0743%" height="15" fill="rgb(240,187,13)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="383.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="357" width="8.0743%" height="15" fill="rgb(223,113,26)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="367.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="341" width="8.0743%" height="15" fill="rgb(206,192,2)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="351.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="325" width="8.0743%" height="15" fill="rgb(241,108,4)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="335.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="309" width="8.0743%" height="15" fill="rgb(247,173,49)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="319.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="293" width="8.0743%" height="15" fill="rgb(224,114,35)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="303.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="277" width="8.0743%" height="15" fill="rgb(245,159,27)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="287.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="261" width="8.0743%" height="15" fill="rgb(245,172,44)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="271.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="245" width="8.0743%" height="15" fill="rgb(236,23,11)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="255.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="229" width="8.0743%" height="15" fill="rgb(205,117,38)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="239.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="213" width="8.0743%" height="15" fill="rgb(237,72,25)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="223.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="197" width="8.0743%" height="15" fill="rgb(244,70,9)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="207.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="181" width="8.0743%" height="15" fill="rgb(217,125,39)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="191.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="165" width="8.0743%" height="15" fill="rgb(235,36,10)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="175.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="149" width="8.0743%" height="15" fill="rgb(251,123,47)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="159.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="133" width="8.0743%" height="15" fill="rgb(221,13,13)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="143.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="117" width="8.0743%" height="15" fill="rgb(238,131,9)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="127.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="101" width="8.0743%" height="15" fill="rgb(211,50,8)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="111.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="85" width="8.0743%" height="15" fill="rgb(245,182,24)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="95.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="69" width="8.0743%" height="15" fill="rgb(242,14,37)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="79.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="53" width="8.0743%" height="15" fill="rgb(246,228,12)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="63.50">[unknown]</text></g><g><title>[unknown] (944,140 samples, 8.07%)</title><rect x="67.0981%" y="37" width="8.0743%" height="15" fill="rgb(213,55,15)" fg:x="7845897" fg:w="944140"/><text x="67.3481%" y="47.50">[unknown]</text></g><g><title>dl_main (1,526,022 samples, 13.05%)</title><rect x="75.1724%" y="565" width="13.0505%" height="15" fill="rgb(209,9,3)" fg:x="8790037" fg:w="1526022"/><text x="75.4224%" y="575.50">dl_main</text></g><g><title>_dl_relocate_object (1,526,022 samples, 13.05%)</title><rect x="75.1724%" y="549" width="13.0505%" height="15" fill="rgb(230,59,30)" fg:x="8790037" fg:w="1526022"/><text x="75.4224%" y="559.50">_dl_relocate_object</text></g><g><title>elf_dynamic_do_Rela (1,526,022 samples, 13.05%)</title><rect x="75.1724%" y="533" width="13.0505%" height="15" fill="rgb(209,121,21)" fg:x="8790037" fg:w="1526022"/><text x="75.4224%" y="543.50">elf_dynamic_do_Rela</text></g><g><title>elf_machine_rela_relative (1,526,022 samples, 13.05%)</title><rect x="75.1724%" y="517" width="13.0505%" height="15" fill="rgb(220,109,13)" fg:x="8790037" fg:w="1526022"/><text x="75.4224%" y="527.50">elf_machine_rela_rel..</text></g><g><title>cargo (11,673,099 samples, 99.83%)</title><rect x="0.0000%" y="645" width="99.8283%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="11673099"/><text x="0.2500%" y="655.50">cargo</text></g><g><title>_start (7,091,993 samples, 60.65%)</title><rect x="39.1776%" y="629" width="60.6507%" height="15" fill="rgb(215,41,42)" fg:x="4581106" fg:w="7091993"/><text x="39.4276%" y="639.50">_start</text></g><g><title>_dl_start (2,883,062 samples, 24.66%)</title><rect x="75.1724%" y="613" width="24.6559%" height="15" fill="rgb(224,123,36)" fg:x="8790037" fg:w="2883062"/><text x="75.4224%" y="623.50">_dl_start</text></g><g><title>_dl_start_final (2,883,062 samples, 24.66%)</title><rect x="75.1724%" y="597" width="24.6559%" height="15" fill="rgb(240,125,3)" fg:x="8790037" fg:w="2883062"/><text x="75.4224%" y="607.50">_dl_start_final</text></g><g><title>_dl_sysdep_start (2,883,062 samples, 24.66%)</title><rect x="75.1724%" y="581" width="24.6559%" height="15" fill="rgb(205,98,50)" fg:x="8790037" fg:w="2883062"/><text x="75.4224%" y="591.50">_dl_sysdep_start</text></g><g><title>dl_platform_init (1,357,040 samples, 11.61%)</title><rect x="88.2229%" y="565" width="11.6054%" height="15" fill="rgb(205,185,37)" fg:x="10316059" fg:w="1357040"/><text x="88.4729%" y="575.50">dl_platform_init</text></g><g><title>init_cpu_features (1,357,040 samples, 11.61%)</title><rect x="88.2229%" y="549" width="11.6054%" height="15" fill="rgb(238,207,15)" fg:x="10316059" fg:w="1357040"/><text x="88.4729%" y="559.50">init_cpu_features</text></g><g><title>dl_init_cacheinfo (1,357,040 samples, 11.61%)</title><rect x="88.2229%" y="533" width="11.6054%" height="15" fill="rgb(213,199,42)" fg:x="10316059" fg:w="1357040"/><text x="88.4729%" y="543.50">dl_init_cacheinfo</text></g><g><title>handle_intel (1,357,040 samples, 11.61%)</title><rect x="88.2229%" y="517" width="11.6054%" height="15" fill="rgb(235,201,11)" fg:x="10316059" fg:w="1357040"/><text x="88.4729%" y="527.50">handle_intel</text></g><g><title>intel_check_word (1,357,040 samples, 11.61%)</title><rect x="88.2229%" y="501" width="11.6054%" height="15" fill="rgb(207,46,11)" fg:x="10316059" fg:w="1357040"/><text x="88.4729%" y="511.50">intel_check_word</text></g><g><title>all (11,693,172 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="11693172"/><text x="0.2500%" y="671.50"></text></g><g><title>perf-exec (20,073 samples, 0.17%)</title><rect x="99.8283%" y="645" width="0.1717%" height="15" fill="rgb(243,32,47)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="655.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="629" width="0.1717%" height="15" fill="rgb(247,202,23)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="639.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="613" width="0.1717%" height="15" fill="rgb(219,102,11)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="623.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="597" width="0.1717%" height="15" fill="rgb(243,110,44)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="607.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="581" width="0.1717%" height="15" fill="rgb(222,74,54)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="591.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="565" width="0.1717%" height="15" fill="rgb(216,99,12)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="575.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="549" width="0.1717%" height="15" fill="rgb(226,22,26)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="559.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="533" width="0.1717%" height="15" fill="rgb(217,163,10)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="543.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="517" width="0.1717%" height="15" fill="rgb(213,25,53)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="527.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="501" width="0.1717%" height="15" fill="rgb(252,105,26)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="511.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="485" width="0.1717%" height="15" fill="rgb(220,39,43)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="495.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="469" width="0.1717%" height="15" fill="rgb(229,68,48)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="479.50"></text></g><g><title>[unknown] (20,073 samples, 0.17%)</title><rect x="99.8283%" y="453" width="0.1717%" height="15" fill="rgb(252,8,32)" fg:x="11673099" fg:w="20073"/><text x="100.0783%" y="463.50"></text></g><g><title>[unknown] (1,458 samples, 0.01%)</title><rect x="99.9875%" y="437" width="0.0125%" height="15" fill="rgb(223,20,43)" fg:x="11691714" fg:w="1458"/><text x="100.2375%" y="447.50"></text></g><g><title>[unknown] (1,458 samples, 0.01%)</title><rect x="99.9875%" y="421" width="0.0125%" height="15" fill="rgb(229,81,49)" fg:x="11691714" fg:w="1458"/><text x="100.2375%" y="431.50"></text></g><g><title>[unknown] (1,458 samples, 0.01%)</title><rect x="99.9875%" y="405" width="0.0125%" height="15" fill="rgb(236,28,36)" fg:x="11691714" fg:w="1458"/><text x="100.2375%" y="415.50"></text></g><g><title>[unknown] (1,458 samples, 0.01%)</title><rect x="99.9875%" y="389" width="0.0125%" height="15" fill="rgb(249,185,26)" fg:x="11691714" fg:w="1458"/><text x="100.2375%" y="399.50"></text></g><g><title>[unknown] (1,458 samples, 0.01%)</title><rect x="99.9875%" y="373" width="0.0125%" height="15" fill="rgb(249,174,33)" fg:x="11691714" fg:w="1458"/><text x="100.2375%" y="383.50"></text></g><g><title>[unknown] (1,458 samples, 0.01%)</title><rect x="99.9875%" y="357" width="0.0125%" height="15" fill="rgb(233,201,37)" fg:x="11691714" fg:w="1458"/><text x="100.2375%" y="367.50"></text></g></svg></svg>